<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <title>Documentation IHM - Optimisation du réseau de Mvangan</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 1em;
      line-height: 1.6;
      background-color: #fdfdfd;
    }
    h1 {
      color: #2c3e50;
    }
    pre {
      background-color: #f0f0f0;
      padding: 1em;
      border-radius: 5px;
      overflow-x: auto;
    }
    code {
      background-color: #f7f7f7;
      padding: 0.2em 0.4em;
      border-radius: 3px;
      font-family: Consolas, "Courier New", monospace;
    }
  </style>
</head>
<body>
  <h1>Documentation de l'IHM (interface graphique Tkinter)</h1>
  
  <p>
    Cette page décrit la manière dont l'interface graphique (IHM) a été conçue pour
    l'optimisation du réseau hydraulique de <strong>Mvangan</strong>, en Python via la librairie
    <code>tkinter</code>.
  </p>

  <h2>1. Structure générale</h2>
  <p>
    Le fichier <strong>gui.py</strong> définit une classe <code>Application</code>
    héritée de <code>tk.Tk</code>. C’est la fenêtre principale de l’application.
    Elle propose des champs de saisie (paramètres d’optimisation), des boutons 
    pour lancer l’optimisation mono et multi‐objectifs, et intègre une zone de console 
    permettant d’afficher en direct les messages <code>print</code>.
  </p>
  <pre>
class Application(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Optimisation d'un réseau hydraulique")
        # ...
  </pre>

  <h2>2. Création des widgets</h2>
  <p>
    Plusieurs champs de saisie (pression min, pression max, diamètres, etc.) sont créés via
    des <em>Labels</em> et des <em>Entry</em> reliés à des variables Tkinter 
    (<code>DoubleVar</code>, <code>IntVar</code>, etc.).
    On utilise également quelques <code>Button</code> pour déclencher les actions
    d’optimisation et de visualisation.
  </p>
  <pre>
// Exemple
tk.Label(self, text="Pression min (m) :").grid(...)
tk.Entry(self, textvariable=self.pression_min).grid(...)
  </pre>

  <h2>3. Boutons et méthodes associées</h2>
  <p>
    Deux méthodes principales gèrent le lancement de l’optimisation <em>mono‐objectif</em> 
    et <em>multi‐objectif</em> (NSGA‐II). Les boutons sont reliés à ces méthodes via 
    <code>command=...</code>. Un troisième bouton, 
    <code>Afficher Visualisation</code>, informe l’utilisateur de l’emplacement 
    des figures générées.
  </p>
  <pre>
tk.Button(self, text="Lancer Optimisation (mono)",
          command=self._lancer_optimisation).grid(...)
  </pre>

  <h2>4. Image de fond</h2>
  <p>
    Afin d'ajouter une image de fond, on utilise un <code>Label</code> contenant
    un <code>tk.PhotoImage</code> (sans Pillow). On détermine la taille de la fenêtre 
    en fonction de l’image, et on empêche le redimensionnement afin 
    de garder un affichage cohérent.
  </p>
  <pre>
self.background_image = tk.PhotoImage(file="background.png")
w = self.background_image.width()
h = self.background_image.height()
self.geometry(f"{w}x{h}")
self.resizable(False, False)
bg_label = tk.Label(self, image=self.background_image)
bg_label.place(x=0, y=0, relwidth=1, relheight=1)
  </pre>

  <h2>5. Redirection des sorties print</h2>
  <p>
    Pour visualiser dans la fenêtre les messages de <code>print</code> (venant par 
    exemple de <code>optimisation.py</code>), nous redirigeons la sortie standard 
    (<code>sys.stdout</code>) vers un widget <code>ScrolledText</code>.
  </p>
  <pre>
sys.stdout = TextRedirector(self.console)
sys.stderr = TextRedirector(self.console)
  </pre>

  <p>
    Ainsi, toute instruction <code>print()</code> s’affiche dans la partie « console » 
    de l’interface, plutôt que dans la console système.
  </p>

  <h2>6. Lancement de l’application</h2>
  <p>
    Enfin, à la fin du fichier, on instancie la classe et on exécute la 
    boucle principale Tkinter :
  </p>
  <pre>
if __name__ == "__main__":
    app = Application()
    app.mainloop()
  </pre>
  <p>
    Cela ouvre la fenêtre avec l’image de fond, les champs de configuration, 
    les boutons et la zone de console.
  </p>

  <hr>
  <p>
    Pour plus de détails, référez-vous au code Python complet dans <code>gui.py</code>
    et au module <code>optimisation.py</code> qui contient la logique 
    de calcul et d’optimisation pour le réseau de Mvangan.
  </p>
</body>
</html>
